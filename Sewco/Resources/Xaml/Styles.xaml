<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:exConfig="clr-namespace:Sewco.Modules.ControlPanel"
                    xmlns:extern="clr-namespace:Sewco.Resources.Helper_classes"
                    >

    <ResourceDictionary.MergedDictionaries>
        <!--Add other resource files if needed -->
    </ResourceDictionary.MergedDictionaries>

    <exConfig:clLanguageConverter x:Key="LangConverter"/>
    <extern:NotConverter x:Key="NotConverter" />
    <extern:StyleConverter x:Key="styleConverter"/>
    
    <Style x:Key="HeaderFooterWindowStyle" TargetType="Window">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- Header -->
                        <Border Grid.Row="0" Background="Red">
                            <TextBlock Text="Header"/>
                        </Border>

                        <!-- Body -->
                        <ContentPresenter Grid.Row="1"/>

                        <!-- Footer -->
                        <Border Grid.Row="2" Background="Red">
                            <TextBlock Text="Footer"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Header" TargetType="Window">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="200"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TextBlock Text="Header" Grid.Column="0" />
                        <!--     <Label Content="{Binding Login.sName}" Grid.Column="1" /> -->
                        <Label Content="dd" Grid.Column="1" />


                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Footer" TargetType="Window">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Border Grid.Row="0" Background="Red">
                            <TextBlock Text="Footer"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LabelHeaderFooter" TargetType="Label">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontSize" Value="20" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BorderHeaderFooter" TargetType="Border">
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="Background" Value="#10455A" />
    </Style>
    <Style x:Key="ButtonLoginOutHeader" TargetType="Button">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextboxLoginOutHeaderUserName" TargetType="TextBox">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Width" Value="300" />
        <Setter Property="Background" Value="White" />
        <Setter Property="FontSize" Value="20" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />

        <Style.Resources>
            <VisualBrush x:Key="userName" AlignmentX="Left" AlignmentY="Center" Stretch="None">
                <VisualBrush.Visual>
                    <Label Content="{Binding Converter={StaticResource LangConverter}, ConverterParameter=__username}" Foreground="Black"  FontSize="20"/>
                </VisualBrush.Visual>
            </VisualBrush>
        </Style.Resources>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="Text" Value="{x:Static sys:String.Empty}">
                <Setter Property="Background" Value="{StaticResource userName}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextboxLoginOutHeaderPassword" TargetType="TextBox">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Width" Value="300" />
        <Setter Property="Background" Value="White" />
        <Setter Property="FontSize" Value="20" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />

        <Style.Resources>
            <VisualBrush x:Key="password" AlignmentX="Left" AlignmentY="Center" Stretch="None">
                <VisualBrush.Visual>
                    <Label Content="{Binding Converter={StaticResource LangConverter}, ConverterParameter=__password}" Foreground="Black" FontSize="20"/>
                </VisualBrush.Visual>
            </VisualBrush>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="Text" Value="{x:Static sys:String.Empty}">
                <Setter Property="Background" Value="{StaticResource password}" />
            </Trigger>
        </Style.Triggers>


    </Style>
    <Style x:Key="MainMenu" TargetType="Menu">
    </Style>
    <Style x:Key="BtnControlPanelMenu" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#1a1a1a"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="4" BorderBrush="Black" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#C4C4C4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#cccccc"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BtnControlPanelMenuSubmenu"  TargetType="Button" BasedOn="{StaticResource BtnControlPanelMenu}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=xShowDatabaseMenu}" Value="true">
                <Setter Property="Background" Value="#cccccc" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MainMenuItem1" TargetType="MenuItem">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="7,2,8,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="7,2,8,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="2,3,2,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="2,3,2,3"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MainMenuItem" TargetType="MenuItem">
        <!--<Setter Property="FontSize" Value="30"/>
        <Setter Property="HorizontalContentAlignment"   Value="Center"/>
        <Setter Property="HorizontalAlignment"          Value="Stretch"/>
        <Setter Property="VerticalContentAlignment"     Value="Center"/>
        <Setter Property="VerticalAlignment"            Value="Stretch"/>
        <Setter Property="Background"                   Value="#B9E6FF"/>
        <Setter Property="Foreground"                   Value="#FFFFFF"/>

        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.0, 0.5" EndPoint="1.0, 0.5" >
                    <GradientStop Color="#10455A"   Offset="0.8"/>
                    <GradientStop Color="#0F3F54"   Offset="1.0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter> -->

        <Setter Property="Background" Value="#B9E6FF"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="FontSize" Value="17"/>

        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.2, 0.2" EndPoint="0.8, 0.8">
                    <GradientStop Color="#10455A"   Offset="0.8"/>
                    <GradientStop Color="#0F3F54"   Offset="1.0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#D0112B"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RoundCorner" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" CornerRadius="8" BorderBrush="Black" BorderThickness="1">
                            <Border.Background>
                                <RadialGradientBrush GradientOrigin="0.496,1.052">
                                    <RadialGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterX="1" CenterY="1" ScaleX="1" ScaleY="1.5"/>
                                            <TranslateTransform X="0.2" Y="0.3"/>
                                        </TransformGroup>
                                    </RadialGradientBrush.RelativeTransform>
                                    <GradientStop Offset="1" Color="#00000000"/>
                                    <GradientStop Offset="0.3" Color="Yellow"/>
                                </RadialGradientBrush>
                            </Border.Background>
                            <ContentPresenter HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         TextElement.FontWeight="Bold"></ContentPresenter>
                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <RadialGradientBrush GradientOrigin="0.496,1.052">
                                        <RadialGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                                <TranslateTransform X="0.02" Y="0.3"/>
                                            </TransformGroup>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Color="#00000000" Offset="1"/>
                                        <GradientStop Color="#FF303030" Offset="0.3"/>
                                    </RadialGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF33962B"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnSelectImage" TargetType="Button">
        <Setter Property="Background"  Value="Transparent"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BtnStyleTest" TargetType="Button">
        <Setter Property="Background" Value="#B9E6FF"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="4" BorderBrush="Black" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#C4C4C4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#25AEFE"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#DCF1FE" />
                <Setter Property="Foreground" Value="#C3B5B5" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- DIT IS DE ORIGINELE-->
    <Style x:Key="BtnStyle" TargetType="Button">
        <Setter Property="Background" Value="#B9E6FF"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="4" BorderBrush="Black" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#C4C4C4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.2, 0.2" EndPoint="0.8, 0.8">
                    <GradientStop Color="#10455A"   Offset="0.8"/>
                    <GradientStop Color="#0F3F54"   Offset="1.0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#D0112B"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#7598A5" />
                <Setter Property="Foreground" Value="#FFFFFF" />
            </Trigger>
        </Style.Triggers>
        <!--
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.2, 0.2" EndPoint="0.8, 0.8">
                    <GradientStop Color="#95DFFC"   Offset="0.0"/>
                    <GradientStop Color="#6FD3FA"   Offset="1.0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#25AEFE"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#DCF1FE" />
                <Setter Property="Foreground" Value="#C3B5B5" />
            </Trigger>
        </Style.Triggers>
        -->


    </Style>
    <Style x:Key="BtnStyleProductionSubmenu" TargetType="Button" BasedOn="{StaticResource BtnStyle}" >
        <Setter Property="Margin" Value="10, 5, 10, 5" />
        <Setter Property="Width" Value="280" />
        <Setter Property="Height" Value="25" />

    </Style>
    <Style x:Key="BtnStyleFunction" TargetType="Button">
        <Setter Property="Background" Value="#7498A4"/>
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="4" BorderBrush="Black" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#C4C4C4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Background" Value="#10455A" />

            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BtnStyleMenuProduction" TargetType="Button" BasedOn="{StaticResource BtnStyle}">
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="Margin" Value="0,10,0,10"/>


    </Style>
    <Style x:Key="BtnStyleSeamProductionNoFade" TargetType="Button" BasedOn="{StaticResource BtnStyle}">
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=xActive}" Value="False">
                <Setter Property="Background" Value="Transparent" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BtnStyleSeamProductionFadeIn" TargetType="Button" BasedOn="{StaticResource BtnStyleSeamProductionNoFade}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                     Duration="00:00:02"
                                                                     From="0.2"
                                                                     To="1" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <!-- Werkt niet -->
    <Style x:Key="BtnStyleSeamProductionFadeOut" TargetType="Button" BasedOn="{StaticResource BtnStyleSeamProductionNoFade}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded" >
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="00:00:02" From="1" To="0.2" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BtnStyleSeamProductionActiveSeam" TargetType="Button" BasedOn="{StaticResource BtnStyleSeamProductionNoFade}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <BeginStoryboard>
                    <Storyboard TargetProperty="Width">
                        <DoubleAnimation From="50" To="75" Duration="0:0:0.5" />
                    </Storyboard>
                </BeginStoryboard>
                <BeginStoryboard>
                    <Storyboard TargetProperty="Height">
                        <DoubleAnimation From="50" To="75" Duration="0:0:0.5" />
                    </Storyboard>
                </BeginStoryboard>
                <BeginStoryboard>
                    <Storyboard TargetProperty="FontSize">
                        <DoubleAnimation From="17" To="30" Duration="0:0:0.5" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="grdMenu" TargetType="Grid">
        <Setter Property="Background" Value="#B9E6FF"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.0, 0.5" EndPoint="1.0, 0.5" >
                    <GradientStop Color="#ECF1FF"   Offset="0.8"/>
                    <GradientStop Color="#E6EAF7"   Offset="1.0"/>
                    <!-- E6EAF7 -->
                </LinearGradientBrush>

            </Setter.Value>

        </Setter>


    </Style>
    <Style x:Key="tglBtnStyleMenu" TargetType="ToggleButton">
        <Setter Property="Background" Value="#B9E6FF"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="4,0,0,4" BorderBrush="Black" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#C4C4C4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.0, 0.5" EndPoint="1.0, 0.5" >
                    <GradientStop Color="#ECF1FF"   Offset="0.8"/>
                    <GradientStop Color="#E6EAF7"   Offset="1.0"/>
                    <!-- E6EAF7 -->
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#25AEFE"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!-- <Setter Property="Background" Value="#DCF1FE" />
                <Setter Property="Foreground" Value="#E6EAF7" /> -->
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Background" Value="#25AEFE" />
                <Setter Property="Foreground" Value="#000000" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="#DCF1FE" />
                <Setter Property="Foreground" Value="#000000" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BtnStyleMenu" TargetType="Button">
        <Setter Property="Background" Value="#B9E6FF"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="4,4,4,4" BorderBrush="Black" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#C4C4C4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.0, 0.5" EndPoint="1.0, 0.5" >
                    <GradientStop Color="#10455A"   Offset="0.8"/>
                    <GradientStop Color="#0F3F54"   Offset="1.0"/>
                    <!-- DDE7FF C6D6FF -->
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#D0112B"/>
                <!-- 25AEFE -->
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">

                <Setter Property="Background" Value="#D0112B" />
                <!-- ECF1FF -->
                <!--
                <Setter Property="Foreground" Value="#E6EAF7" />
                -->
            </Trigger>
            <!--
            <DataTrigger Binding="{Binding isActive}" Value="true">
                <Setter Property="Background" Value="#ECF1FF" />
            </DataTrigger>
            -->
        </Style.Triggers>
    </Style>
    <Style x:Key="BtnStyleSmall" TargetType="Button">
        <Setter Property="Background" Value="#B9E6FF"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="FontSize" Value="17"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#C4C4C4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#25AEFE"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#DCF1FE" />
                <Setter Property="Foreground" Value="#C3B5B5" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BtnDelete" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility" Value="Visible"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#25AEFE"/>
            </Trigger>
            <!--
            <DataTrigger Binding="{Binding xIsLastItem}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            -->
            <Trigger Property="IsEnabled" Value="false" >
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BtnAdd" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#25AEFE"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false" >
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="lblStyle" TargetType="Label">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#53585A" />
            </Trigger>
        </Style.Triggers>

    </Style>
    <Style x:Key="lblStyleSeamProduction" TargetType="Label">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="white" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Foreground" Value="red" />
                <Setter Property="FontSize" Value="26" />
            </Trigger>
        </Style.Triggers>

    </Style>
    <Style x:Key="tbxStyleSeam" TargetType="TextBox">
        <Setter Property="Width" Value="150" />
        <Setter Property="Height" Value="38"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="21"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <!--<Setter Property="Background" Value="#FF4D4D"/> -->
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="ToolTip" Value="{Binding Path=(Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="tbxStandard" TargetType="TextBox">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="21"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <Style x:Key="tbxErrorValidation" TargetType="TextBox" BasedOn="{StaticResource tbxStandard}">
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="38"/>
    </Style>
    <Style x:Key="GridStyle" TargetType="Grid">
        <Style.Resources>
            <Style TargetType="{x:Type RowDefinition}">
                <Setter Property="Height" Value="43"/>
            </Style>
        </Style.Resources>
    </Style>
    <Style x:Key="cbbStyleTest" TargetType="ComboBox">
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="38"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="IsTextSearchEnabled" Value="True"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border CornerRadius="5" BorderBrush="Red">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#DCF1FE" />
                <Setter Property="Foreground" Value="#C3B5B5" />
            </Trigger>
        </Style.Triggers>

    </Style>
    <Style x:Key="cbbStyleDefault" TargetType="ComboBox">
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="38"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="IsTextSearchEnabled" Value="True"/>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#DCF1FE" />
                <Setter Property="Foreground" Value="#C3B5B5" />
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="BorderBrush" Value="Red" />
            </Trigger>
            <!--
            <Trigger Property="{Binding projectsModel.}" Value="True">
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="ToolTip" Value="{Binding Path=(Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
            </Trigger>
            -->
        </Style.Triggers>
    </Style>
    <Style x:Key="cbbStyleEnabledIsVisible" TargetType="ComboBox">
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="38"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="IsTextSearchEnabled" Value="True"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#DCF1FE" />
                <Setter Property="Foreground" Value="#C3B5B5" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false" >
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GridTest" TargetType="Grid">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false" >
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="brdComboboxBorder" TargetType="Border">
        <Setter Property="BorderBrush" Value="Red"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>
    <Style x:Key="grpBoxStyle" TargetType="GroupBox">
        <Setter Property="BorderBrush" Value="DarkGray"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Height" Value="Auto"/>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false" >
                <Setter Property="BorderBrush" Value="LightGray" />
                <Setter Property="Foreground" Value="#C3B5B5"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="tbSearch" TargetType="TextBox" >
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="38"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="21"/>
        <!-- Based on: http://stackoverflow.com/questions/7425618/how-can-i-add-a-hint-text-to-wpf-textbox -->
        <Style.Resources>
            <VisualBrush x:Key="CueBannerBrush" AlignmentX="Left" AlignmentY="Center" Stretch="None">
                <VisualBrush.Visual>
                    <Label Content="{Binding Converter={StaticResource LangConverter}, ConverterParameter=__Search}" Foreground="Black" Style="{StaticResource lblStyle}" FontSize="20"/>
                </VisualBrush.Visual>
            </VisualBrush>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="Text" Value="{x:Static sys:String.Empty}">
                <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="tbSearchPopUp" TargetType="TextBox" >
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="38"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Background" Value="#FFFFFF"/>
        <!-- Based on: http://stackoverflow.com/questions/7425618/how-can-i-add-a-hint-text-to-wpf-textbox -->
        <Style.Resources>
            <VisualBrush x:Key="searchLabel" AlignmentX="Left" AlignmentY="Center" Stretch="None">
                <VisualBrush.Visual>
                    <Label Content="{Binding Converter={StaticResource LangConverter}, ConverterParameter=__Search}" Foreground="Black" Style="{StaticResource lblStyle}"/>
                </VisualBrush.Visual>
            </VisualBrush>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="Text" Value="{x:Static sys:String.Empty}">
                <Setter Property="Background" Value="{StaticResource searchLabel}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="brPopUp" TargetType="Border">
        <Setter Property="BorderBrush" Value="#10455A"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Background" Value="#F9F9F9"/>
        <Setter Property="CornerRadius" Value="5"/>
    </Style>
    <Style x:Key="puPopUpSubmenu" TargetType="Popup">
        <Setter Property="Placement" Value="Right"/>
        <Setter Property="PopupAnimation" Value="fade"/>
        <Setter Property="AllowsTransparency" Value="True"/>
    </Style>
    <Style x:Key="puPopUp" TargetType="Popup">
        <Setter Property="Placement" Value="Center"/>
        <Setter Property="PopupAnimation" Value="Fade"/>
        <Setter Property="AllowsTransparency" Value="True"/>
    </Style>
    <Style x:Key="_ListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="_Border"
                                Padding="2"
                                SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <!-- <Setter TargetName="_Border" Property="Background" Value="#10455A"/> -->
                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="{Binding iListboxItemHeight}" />
        
    </Style>
    <SolidColorBrush x:Key="testborder" Color="#10455A"/>
    <SolidColorBrush Color="#7498A4" Opacity="0.2" x:Key="bgHalfOpacity"/>
    <Style x:Key="brMenu"  TargetType="Border" BasedOn="{StaticResource brPopUp}">
        <Setter Property="Margin" Value="20, 20, 20, 0"/>
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="Background" Value="{StaticResource bgHalfOpacity}"/>
    </Style>
    <Style x:Key="brStatusBar"  TargetType="Border">
        <Setter Property="Margin" Value="20, 20, 0, 20"/>
        <Setter Property="Background" Value="{StaticResource bgHalfOpacity}"/>
        <!-- 10455A -->
        <Setter Property="CornerRadius" Value="10"/>
    </Style>
    <Style x:Key="brTrend"  TargetType="Border">
        <Setter Property="Margin" Value="20, 20, 0, 20"/>
        <Setter Property="Background" Value="#10455A"/>
        <Setter Property="CornerRadius" Value="10"/>
    </Style>
    <Style x:Key="CustomThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="11"/>
        <Setter Property="Foreground" Value="Gray"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <StackPanel>

                        <Canvas SnapsToDevicePixels="true">

                            <Canvas.RenderTransform>
                                <TranslateTransform X="5.5" Y="11"/>
                            </Canvas.RenderTransform>
                            <Path x:Name="Background" Data="{StaticResource SliderThumbOuterBorderGeometry}" Fill="{StaticResource HorizontalSliderThumbNormalBackground}"/>
                            <Path x:Name="InnerBorder" Data="{StaticResource SliderThumbMiddleBorderGeometry}" Stroke="White"/>
                            <Path x:Name="OuterBorder" Data="{StaticResource SliderThumbOuterBorderGeometry}" Stroke="#FF929292"/>
                            <Label Margin="-5.5,12,0,-12" Background="Brown" HorizontalAlignment="Center"
                               Content="{Binding (Slider.Value),RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Slider}}}"></Label>
                        </Canvas>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="Background" Value="{StaticResource HorizontalSliderThumbHoverBackground}"/>
                            <Setter Property="Stroke" TargetName="OuterBorder" Value="{StaticResource HorizontalSliderThumbHoverBorder}"/>
                        </Trigger>
                        <Trigger Property="Foreground" Value="Blue">
                            <Setter Property="Fill" TargetName="Background" Value="{StaticResource HorizontalSliderThumbHoverBackground}"/>
                            <Setter Property="Stroke" TargetName="OuterBorder" Value="{StaticResource HorizontalSliderThumbHoverBorder}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="Background" Value="{StaticResource HorizontalSliderThumbPressedBackground}"/>
                            <Setter Property="Stroke" TargetName="OuterBorder" Value="{StaticResource HorizontalSliderThumbPressedBorder}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="Background" Value="#FFF4F4F4"/>
                            <Setter Property="Stroke" TargetName="InnerBorder" Value="{x:Null}"/>
                            <Setter Property="Data" TargetName="OuterBorder" Value="{StaticResource SliderThumbDisabledGeometry}"/>
                            <Setter Property="Stroke" TargetName="OuterBorder" Value="#FFAEB1AF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="cbStyle" TargetType="CheckBox">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#C3B5B5" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ttStyle" TargetType="ToolTip">
        <Setter Property="FontSize" Value="20"/>
    </Style>
    <Style x:Key="imageBorder" TargetType="Border">
        <Setter Property="BorderBrush" Value="#10455A" />
        <Setter Property="BorderThickness" Value="3" />
        <Setter Property="CornerRadius" Value="10" />
    </Style>
    <Style x:Key="bdValidation_old" TargetType="Border">
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="38"/>
        <Setter Property="BorderThickness" Value="{Binding Path=iBorderThickness}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=xHasError}" Value="True">
                <Setter Property="BorderBrush" Value="Red"/>
            </DataTrigger>
        </Style.Triggers>
        <Style.Resources>
            <TextBox x:Key="Input" Style="{StaticResource tbxErrorValidation}"
                                            Text="{Binding Path=sInput, UpdateSourceTrigger=PropertyChanged}" ToolTip="{Binding Path=sErrorReport}" Width="Auto" VerticalAlignment="Center">
            </TextBox>
        </Style.Resources>
    </Style>
    <Style x:Key="bdErrorValidation" TargetType="Border">
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="38"/>
        <Setter Property="BorderThickness" Value="{Binding Path=iBorderThickness}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=xHasError}" Value="True">
                <Setter Property="BorderBrush" Value="Red"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="imageStatus" TargetType="Image">
        <Setter Property="Width" Value="auto" />
        <Setter Property="Height" Value="60" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.2" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="statusSliderThumb" TargetType="{x:Type Thumb}">
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <!-- FFA3A3A3 -->
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Canvas SnapsToDevicePixels="true">
                        <Grid Height="20" Width="20">
                            <Ellipse x:Name="Background" 
                            Fill="#10455A"
                                  
                            Height="20" Width="20"
                            Stroke="#FFDADADA"/>
                            <TextBlock HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Foreground="White"
                            FontSize="9"
                            Text="{Binding iActStitch}" />
                            <!--"{Binding Value, RelativeSource={RelativeSource AncestorType={x:Type Slider}}, Converter={StaticResource ConvertToIntegerConverter}}"/>-->
                        </Grid>
                    </Canvas>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="Background" 
                            Value="#FFDADADA"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="Background" 
                            Value="#FFF2F2F2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="Background" 
                            Value="#10455A"/>

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="HorizontalSliderTrackNormalBackground" Color="#FFE7EAEA"/>
    <LinearGradientBrush x:Key="HorizontalSliderTrackNormalBorder" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFAEB1AF" Offset="0.1"/>
        <GradientStop Color="White" Offset=".9"/>
    </LinearGradientBrush>
    <Style x:Key="SliderRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CustomThumbForSlider" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Ellipse Fill="Green" Stroke="#FF000000" Height="15" Width="15"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyCustomStyleForSlider" TargetType="{x:Type Slider}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TickBar x:Name="TopTick" Visibility="Visible" Fill="Black" Placement="Left" Width="8" Grid.Column="0"/>
                            <TickBar x:Name="BottomTick" Visibility="Visible" Fill="Black" Placement="Right" Width="8" Grid.Column="0"/>
                            <Border x:Name="TrackBackground" 
                                        Background="{StaticResource HorizontalSliderTrackNormalBackground}"
                                        BorderBrush="{StaticResource HorizontalSliderTrackNormalBorder}"
                                        BorderThickness="1" CornerRadius="1"
                                        Margin="5,0" VerticalAlignment="Center" Width="4.0" Grid.Column="1" >
                                <Canvas Margin="-6,-1">
                                    <Rectangle Visibility="Hidden" x:Name="PART_SelectionRange" Height="4.0"
                                                   Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                                   Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                                                   StrokeThickness="1.0"/>
                                </Canvas>
                            </Border>
                            <Track x:Name="PART_Track" Grid.Column="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource SliderRepeatButtonStyle}" Command="{x:Static Slider.DecreaseLarge}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource SliderRepeatButtonStyle}" Command="{x:Static Slider.IncreaseLarge}"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Style="{StaticResource statusSliderThumb}" Background="Black"/>
                                </Track.Thumb>
                            </Track>


                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="statusbarIcon" TargetType="Image">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SliderRepeatButton" TargetType="RepeatButton">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SliderRepeatButton1" TargetType="RepeatButton">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border SnapsToDevicePixels="True" Background="YellowGreen"  BorderThickness="1" BorderBrush="YellowGreen" Width="3"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SliderThumb" TargetType="Thumb">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <StackPanel Orientation="Horizontal">
                        <Path Data="M 0 0 L 8 0 L 4 6 Z"  Stroke="YellowGreen" Margin="0,-2,0,0" StrokeThickness="2" Fill="YellowGreen"></Path>
                        <Line X1="0" Y1="0" X2="7" Y2="0" Stroke="Gray" StrokeThickness="1" Margin="0,2,0,0" StrokeDashArray="1.5,1.5"></Line>
                        <TextBlock Foreground="Black" Margin="30,-2,0,0"  Text="{Binding Value, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Slider}}}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="Slider"  TargetType="Slider">
        <Grid>
            <!--
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            -->
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TickBar  x:Name="TopTick"  Fill="LightGray" HorizontalAlignment="Left"   SnapsToDevicePixels="True" Grid.Column="0" Placement="Left" Width="5" Visibility="Visible"/>
            <Border BorderBrush="LightGray"  BorderThickness="1,0,0,0" ></Border>
            <!-- grijze vert. lijn -->
            <Border x:Name="TrackBackground" HorizontalAlignment="Center" Margin="-10,0,0,0" BorderBrush="Red" Background="Red" Width="3"  Grid.Column="1"  BorderThickness="1"/>
            <Track Grid.Column="1" x:Name="PART_Track" Margin="-10,0,0,0"  >
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderRepeatButton1}"  Command="Slider.DecreaseLarge" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource SliderThumb}" Margin="-20,0,0,0" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderRepeatButton}" Command="Slider.IncreaseLarge" />
                </Track.IncreaseRepeatButton>
            </Track>
            <TextBlock Text="0" Grid.Column="1" Margin="15,0,0,0"></TextBlock>
            <TickBar x:Name="BottomTick" Fill="LightGray"   SnapsToDevicePixels="True" Grid.Column="2"   Placement="Left"  Width="4" Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement"  Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility"  Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick"  Property="Visibility"  Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="Vertical_Slider" TargetType="Slider">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="MinHeight" Value="104" />
                <Setter Property="MinWidth" Value="21" />
                <Setter Property="Template" Value="{StaticResource Slider}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="epProduction" TargetType="Expander">
        <Setter Property="FontSize" Value="20" />
        <Setter Property="Padding" Value="5" />
    </Style>
    <Style x:Key="tbExProduction" TargetType="TextBox">
        <Setter Property="FontSize" Value="20" />
        <Setter Property="Background" Value="White" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border CornerRadius="4" Padding="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" >
                        <ScrollViewer x:Name="PART_ContentHost"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=xWrongMaterial}" Value="false">
                <Setter Property="Background" Value="#4CAF50" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=xWrongMaterial}" Value="True">
                <Setter Property="Background" Value="#D72828" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="imMaterialCheck" TargetType="Image">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=xWrongMaterial}" Value="false">
                <Setter Property="Source" Value="/Resources/Images/commonImages/Ok.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=xWrongMaterial}" Value="True">
                <Setter Property="Source" Value="/Resources/Images/commonImages/Alert.png" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="imErrorProduction" TargetType="Image">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Source" Value="/Resources/Images/commonImages/Alert.png"/>
    </Style>
    
</ResourceDictionary>